startup_packages.R
# List of useful packages
pkg <- c("tidyr", "dplyr", "ggplot2", "knitr", "rmarkdown")
# Check if packages are not installed and assign the
# names of the uninstalled packages to the variable new.pkg
new.pkg <- pkg[!(pkg %in% installed.packages())]
# If there are any packages in the list that aren't installed,
# install them
if (length(new.pkg)) {
install.packages(new.pkg, repos = "http://cran.rstudio.com")
}
library(swirl)
swirl
swirl()
1:20
pi:10
15:1
?":"
seq(1, n20)
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_sq)
length(my_se\q)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
2
exit
quit()
library(swirl)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- c(num_vect < 1, TRUE)
tf <- num_vect < 1
tf
newvar <- num_vect >= 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse =  " ")
c(my_char, "Juan")
my_name <- c(my_char, "Juan")
my_name
paste(my_name, collapse =  " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My", "name", "is")
my_cha
my_char
paste(my_char, collapse = " ")
my_name c(my_char, "Juan", collapse " ")
my_name <- c(my_char, "Juan", collapse " ")
my_name <- (my_char, "Juan")
my_name <- c(my_char, "Juan")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
exit
quit()
rnorn(1)
rnorm(1)
set.seed(000)
rnorm(1)
set.seed(000)
rnorm(1)
set.seed(77)
sample(100, 7)
z <- 5
set.seed(1)
while(z >= 3 && z <= 10) {
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { ## random walk
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
library(swirl)
swirl()
x <- c(44, 5, NA)
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
?rep()
my_data <- sample(c(y, z), 100)
my_na <- is na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na == 1)
sum(my_na)
my_data
0/0
Inf - Iinf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x, 3, 5, 7)
c(3, 5 , 7)
x [c(3, 5 , 7)]
x [c(0)]
x [0]
x [30000]
x [3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect <- c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
vect2
identical(vect vect2)
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector
attributes(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
matrix(1:20, 4, 5)
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c(Bill, Gina, Kelly, Sean)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_Data)
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_matrix)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE |c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 &&
| 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(c(ints > 7))
which(ints > 7)
any(ints<0)
all(ints> 0)
exit
quir
quit
quit()
library(swirl)
swril()
swirl()
Sys.Date()
mean(c(2, 4, 5))
boring_function <- function(x) {
x
}
x
submit()
boring_function
boring_function('my first function!')
boring_function('My first function!')
boring_function
submit()
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit()
my_mean(c(4, 5, 10))
submit()
my_mean(c(4, 5, 10))
submit()
my_mean(c(4, 5, 10))
submit()
my_mean(c(4, 5, 10))
submit()
my_mean(c(4, 5, 10))
submit()
my_mean(c(4, 5, 10))
submit()
my_mean(c(4, 5, 10))
submit()
my_mean(c(4, 5, 10))
submit()
my_mean(c(4, 5, 10))
submit()
my_mean(c(4, 5, 10))
submit()
my_mean(c(4, 5, 10))
submit()
my_mean(c(4, 5, 10))
submit()
my_mean(c(4, 5, 10))
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
my_mean(c(4, 5, 10))
my_mean(c(4, 5, 10))
my_mean(c(4, 5, 10))
my_mean(c(4, 5, 10))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
my_mean(c(4, 5, 10))
my_mean(c(4, 5, 10))
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit()
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
?standard deviation
help(standard deviation)
search(standard deviation)
evaluate sd, c(1.4, 3.6, 7.9, 8.8)
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(HELLO)
telegram(...)
telegram(paste(HELLO))
telegram(paste(fesfsd))
telegram("fesfsd")
submit()
submit()
submit()
submit()
args(mad_libs)
submit()
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
swirl()
ls(plants)
ls(workspace)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants, 10)
tail(plants, 15)
summmary(plants)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 4, replace = FALSE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
?sample
sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips == 1)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
rnom()
rnorm()
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
?rpois
rpois(5)
?rpois
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
cm
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
weekdays(t1)
months(t1)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- strptime("October 17, 1986 08:24", POSIXlt)
t3 <- "October 17, 1986 08:24"
strptime(t3)
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
hea(cars)
head(cars)
plot(cars)
/plot
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(cars)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab "Speed" ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars), main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl)
boxplot(mtcars, mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
x <- c(1, 2, NA, 4, 9, 5)
y <- c("a", "b", "c", "d", NA, "f")
good <- complete.cases(x, y)
good
x[good]
y[good]
data("airquality")  # data("airquality", package="datasets")
head(airquality)
dim(airquality)
str(airquality)
data("AirPassengers")
?airquality
data("airquality")
good <- complete.cases(airquality)
head(airquality[good,])
which(is.na(airquality$Ozone))
sum(is.na(airquality$Ozone))
library(swril)
library(swirl)
swirl()
require(tidyr)
require(dyplr)
require(dplyr)
require(reshape2)
load("C:/Users/Juan Nunez/Desktop/MC_DATA_101/NEWDATA.Rda")
reg <- lm(V14 ~ V254, LESDATA)
reg
summary(reg)
savehistory("C:/Users/Juan Nunez/Desktop/MC_DATA_101/.Rhistory")
